citation("stringr")
library(ToDcallR)
remotes::install_github("https://github.com/eliasschwall/ToDcallR")
library(ToDcallR)
library(gt)
install.packages("gt")
ToDcall_yang_loose <- readRDS("data/ToDcall_yang_data_loose.rds")
gt::gt(ToDcall_yang_loose@ToD_candidates_filtered)
as.data.frame(ToDcall_yang_loose@ToD_candidates_filtered)
#| label: tbl-example
#| tbl-cap: "Example"
#| echo: false
#| layout-nrow: 2
library(ToDcallR)
ToDcall_yang_loose <- readRDS("data/ToDcall_yang_data_loose.rds")
ToDcall_yang_strict <- readRDS("data/ToDcall_yang_data_strict.rds")
library(knitr)
# Concatenate gene names into a single string
genes_1h_vs_0h <- paste(ToDcall_yang_loose@ToD_candidates_filtered$`1h_vs_0h`$mgi_symbol, collapse = ", ")
genes_6h_vs_1h <- paste(ToDcall_yang_loose@ToD_candidates_filtered$`6h_vs_1h`$mgi_symbol, collapse = ", ")
# Create a data frame
df <- data.frame(
Time_Interval = c("1h vs 0h", "6h vs 1h"),
Genes = c(genes_1h_vs_0h, genes_6h_vs_1h),
stringsAsFactors = FALSE
)
# Render the table
kable(df, col.names = c("Time Interval", "ToD Candidate Genes"))
library(kableExtra)
install.packages("kableExtra")
ToDyang_loose <- readRDS("data/ToDcall_yang_data_loose.rds")
ToDyang_loose <- readRDS("data/ToDcall_yang_data_loose.rds")
ToDyang_loose <- ToDyang_loose@ToD_candidates_filtered
ToDyang_loose$`1h_vs_0h`$mgi_symbol
ToDyang_strict <- readRDS("data/ToDcall_yang_data_strict.rds")
ToDyang_strict <- ToDyang_strict@ToD_candidates_filtered
ToDyang_strict$`1h_vs_0h`$mgi_symbol
#| echo: false
#| message: false
#| warning: false
library(ToDcallR)
library(tidyverse)
library(knitr)
# Load the data
ToDyang_loose <- readRDS("data/ToDcall_yang_data_loose.rds")
ToDyang_loose <- ToDyang_loose@ToD_candidates_filtered
ToDyang_strict <- readRDS("data/ToDcall_yang_data_strict.rds")
ToDyang_strict <- ToDyang_strict@ToD_candidates_filtered
# Get the list of time intervals
time_intervals <- names(ToDyang_loose)
# Iterate over each time interval
for (interval in time_intervals) {
# Extract vectors for the current interval
loose_vector <- ToDyang_loose[[interval]]$mgi_symbol
strict_vector <- ToDyang_strict[[interval]]$mgi_symbol
# Find common elements
common_elements <- intersect(loose_vector, strict_vector)
# Create a data frame for display
df <- data.frame(
Symbol = loose_vector,
stringsAsFactors = FALSE
)
# Apply bold formatting to common elements
df$Symbol <- sapply(df$Symbol, function(x) {
if (x %in% common_elements) {
paste0("**", x, "**")
} else {
x
}
})
# Display the table with a title
cat(paste0("### Time Interval: ", interval, "\n\n"))
print(kable(df, col.names = c("MGI Symbol")))
cat("\n\n")
}
time_intervals <- names(ToDyang_loose)
# Initialize an empty data frame to store results
results_df <- tibble(TimeInterval = character(), MgiSymbols = character())
# Iterate over each time interval
for (interval in time_intervals) {
# Extract vectors for the current interval
loose_vector <- ToDyang_loose[[interval]]$mgi_symbol
strict_vector <- ToDyang_strict[[interval]]$mgi_symbol
# Find common elements
common_elements <- intersect(loose_vector, strict_vector)
# Apply bold formatting to common elements
formatted_symbols <- sapply(loose_vector, function(x) {
if (x %in% common_elements) {
paste0("**", x, "**")
} else {
x
}
})
# Concatenate symbols into a single string
symbol_string <- paste(formatted_symbols, collapse = ", ")
# Append to the results data frame
results_df <- bind_rows(results_df, tibble(TimeInterval = interval, MgiSymbols = symbol_string))
}
results_df
results_df
# Load the data
ToDyang_loose <- readRDS("data/ToDcall_yang_data_loose.rds")
ToDyang_loose <- ToDyang_loose@ToD_candidates_filtered
ToDyang_strict <- readRDS("data/ToDcall_yang_data_strict.rds")
ToDyang_strict <- ToDyang_strict@ToD_candidates_filtered
# Get the list of time intervals
time_intervals <- names(ToDyang_loose)
# Initialize an empty data frame to store results
results_df <- tibble(TimeInterval = character(), MgiSymbols = character())
# Iterate over each time interval
for (interval in time_intervals) {
# Extract vectors for the current interval
loose_vector <- ToDyang_loose[[interval]]$mgi_symbol
strict_vector <- ToDyang_strict[[interval]]$mgi_symbol
# Find common elements
common_elements <- intersect(loose_vector, strict_vector)
# Apply bold formatting to common elements
formatted_symbols <- sapply(loose_vector, function(x) {
if (x %in% common_elements) {
paste0("**", x, "**")
} else {
x
}
})
# Concatenate symbols into a single string
symbol_string <- paste(formatted_symbols, collapse = ", ")
# Append to the results data frame
results_df <- bind_rows(results_df, tibble(TimeInterval = interval, MgiSymbols = symbol_string))
}
results_df$TimeInterval <- c("0h to 1h","1h to 6h","6h to 12h","12h to 24h","24h to 36h","36h to 48h")
write.csv(results_df, "../../../Desktop/")
write.csv(results_df, "../../../Desktop/tod.csv")
